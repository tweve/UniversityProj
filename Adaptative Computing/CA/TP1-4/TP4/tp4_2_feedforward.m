% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by NPRTOOL
% Created Thu Nov 22 11:29:55 GMT 2012
%
% This script assumes these variables are defined:
%
%   treino - input data.
%   treinoTargets - target data.

treino = mapminmax(treino , -1,1);
%treino = zscore(treino);

inputs = treino;
targets = treinoTargets;

% Create a Pattern Recognition Network
hiddenLayerSize = [10];
net = feedforwardnet(hiddenLayerSize);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
%net.inputs{1}.processFcns = {'removeconstantrows','mapminmax'};
%net.outputs{2}.processFcns = {'removeconstantrows','mapminmax'};


% For help on training function 'trainlm' type: help trainlm
% For a list of all training functions type: help nntrain
net.trainFcn = 'traingdx';  % Levenberg-Marquardt

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Mean squared error

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
    'plotregression', 'plotfit'};


net.divideFcn = '';
net.trainParam.epochs= 1000;


% Train the Network
[net,tr] = train(net,inputs,targets);

%net = newrb(inputs,targets,0);




% Test the Network
%outputs = net(inputs);
outputs = sim(net,inputs);



certos = 0;
errados = 0;
total = 0;

positivos_verdadeiros = 0;
falsos_negativos = 0;
negativos_verdadeiros = 0;
falsos_positivos = 0;

pre_ict = zeros(4,1);
pre_ict(2,1)= 1;


% Compara o output da rede com o desejado
for i= 1:size(outputs,2)
    tmp = zeros(4,1);
    tmp( find((outputs(:,i)== max (outputs(:,i))),1)) = 1;
    outputs(:,i) = tmp;
    
    % pre ictal
    if (tmp == pre_ict),   %previu
        if (treinoTargets(:,i) == pre_ict) %foi crise
            positivos_verdadeiros = positivos_verdadeiros +1;
        else   %nao foi crise
            falsos_positivos = falsos_positivos+1;
        end
    else %nao previu
        if (treinoTargets(:,i) == pre_ict) % foi crise
            falsos_negativos = falsos_negativos+1;
        else  %nao  foi crise
            negativos_verdadeiros = negativos_verdadeiros +1;
        end
    end
    
    if ( find(outputs(:,i) == max (outputs(:,i)),1) == find(treinoTargets(:,i) == max (treinoTargets(:,i)),1)  )
        certos = certos+1;
    else
        errados = errados+1;
    end
    total = total +1;
    
end

precisao_classificador_treino = certos/total
sensibilidade_treino = positivos_verdadeiros/(positivos_verdadeiros+falsos_negativos)
especificidade_treino = negativos_verdadeiros/(negativos_verdadeiros+falsos_positivos)


finalTreino = [];
for i= 1:size(outputs,2)
    
    a = find((outputs(:,i)==1),1 ) ;
    finalTreino = [finalTreino a];
    
end


finalTreinoTargets = [];
for i= 1:size(treinoTargets,2)
    
    a = find((treinoTargets(:,i)==1),1 ) ;
    finalTreinoTargets = [finalTreinoTargets a];
    
end

figure (1)
hold on
plot(finalTreino,'g')
plot(finalTreinoTargets,'r')




















certos = 0;
errados = 0;
total = 0;


teste = mapminmax(teste , -1,1);
%teste = zscore(teste);

%outputs = net(teste);
outputs = sim(net,teste);

certos = 0;
errados = 0;
total = 0;

positivos_verdadeiros = 0;
falsos_negativos = 0;
negativos_verdadeiros = 0;
falsos_positivos = 0;

pre_ict = zeros(4,1);
pre_ict(2,1)= 1;


% Compara o output da rede com o desejado
for i= 1:size(outputs,2)
    tmp = zeros(4,1);
    tmp( find((outputs(:,i)== max (outputs(:,i))),1)) = 1;
    outputs(:,i) = tmp;
    
    % pre ictal
    if (tmp == pre_ict),   %previu
        if (testeTargets(:,i) == pre_ict) %foi crise
            positivos_verdadeiros = positivos_verdadeiros +1;
        else   %nao foi crise
            falsos_positivos = falsos_positivos+1;
        end
    else %nao previu
        if (testeTargets(:,i) == pre_ict) % foi crise
            falsos_negativos = falsos_negativos+1;
        else  %nao  foi crise
            negativos_verdadeiros = negativos_verdadeiros +1;
        end
    end
    
    if ( find(outputs(:,i) == max (outputs(:,i)),1) == find(testeTargets(:,i) == max (testeTargets(:,i)),1)  )
        certos = certos+1;
    else
        errados = errados+1;
    end
    total = total +1;
    
end

precisao_classificador_teste = certos/total
sensibilidade_teste= positivos_verdadeiros/(positivos_verdadeiros+falsos_negativos)
especificidade_teste = negativos_verdadeiros/(negativos_verdadeiros+falsos_positivos)


finalTeste = [];
for i= 1:size(outputs,2)
    
    a = find((outputs(:,i)==1),1 ) ;
    finalTeste = [finalTeste a];
    
end


finalTesteTargets = [];
for i= 1:size(testeTargets,2)
    
    a = find((testeTargets(:,i)==1),1 ) ;
    finalTesteTargets = [finalTesteTargets a];
    
end

figure (2)
hold on
plot(finalTeste,'g')
plot(finalTesteTargets,'r')



















certos = 0;
errados = 0;
total = 0;

validacao = mapminmax(validacao,-1,1);
%validacao = zscore(validacao);

%outputs = net(validacao);
outputs = sim(net,validacao);

certos = 0;
errados = 0;
total = 0;

positivos_verdadeiros = 0;
falsos_negativos = 0;
negativos_verdadeiros = 0;
falsos_positivos = 0;

pre_ict = zeros(4,1);
pre_ict(2,1)= 1;


% Compara o output da rede com o desejado
for i= 1:size(outputs,2)
    tmp = zeros(4,1);
    tmp( find((outputs(:,i)== max (outputs(:,i))),1)) = 1;
    outputs(:,i) = tmp;
    
    % pre ictal
    if (tmp == pre_ict),   %previu
        if (validacaoTargets(:,i) == pre_ict) %foi crise
            positivos_verdadeiros = positivos_verdadeiros +1;
        else   %nao foi crise
            falsos_positivos = falsos_positivos+1;
        end
    else %nao previu
        if (validacaoTargets(:,i) == pre_ict) % foi crise
            falsos_negativos = falsos_negativos+1;
        else  %nao  foi crise
            negativos_verdadeiros = negativos_verdadeiros +1;
        end
    end
    
    if ( find(outputs(:,i) == max (outputs(:,i)),1) == find(validacaoTargets(:,i) == max (validacaoTargets(:,i)),1)  )
        certos = certos+1;
    else
        errados = errados+1;
    end
    total = total +1;
    
end

precisao_classificador_validacao = certos/total
sensibilidade_validacao = positivos_verdadeiros/(positivos_verdadeiros+falsos_negativos)
especificidade_validacao = negativos_verdadeiros/(negativos_verdadeiros+falsos_positivos)


finalVal = [];
for i= 1:size(outputs,2)
    
    a = find((outputs(:,i)==1),1 ) ;
    finalVal = [finalVal a];
    
end


finalValTargets = [];
for i= 1:size(validacaoTargets,2)
    
    a = find((validacaoTargets(:,i)==1),1 ) ;
    finalValTargets = [finalValTargets a];
    
end

figure (3)
hold on
plot(finalVal,'g')
plot(finalValTargets,'r')